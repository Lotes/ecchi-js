// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`ecchi-generator > blog 1`] = `
"import { Reflection, or, LRUCache, cacheCommonExpressions, cacheSubjectExpressions } from "@ecchi-js/core";

interface UserType {
  $type: "UserType";
  id: number;
  name: string;
  email: string;
  createdAt: string;
  updatedAt: string;
}
interface ArticleType {
  $type: "ArticleType";
  id: number;
  title: string;
  content: string;
  createdAt: string;
  updatedAt: string;
  author: UserType;
  published: boolean;
}
interface CommentType {
  $type: "CommentType";
  id: number;
  content: string;
  createdAt: string;
  updatedAt: string;
  author: UserType;
  article: ArticleType;
  published: boolean;
}
interface A {
  $type: "A"|"B";
  
}
interface B extends A {
  $type: "B";
  
}

export type $Types = {
  UserType: UserType,
  ArticleType: ArticleType,
  CommentType: CommentType,
  A: A,
  B: B,
}

export const $Reflection = new Reflection<$Types>({
  UserType: [0,  1],
  ArticleType: [2,  3],
  CommentType: [4,  5],
  A: [6,  9],
  B: [7,  8],
});

export type $UserType = UserType;


export type $Role = 'AdminUser'|'NormalUser';
export type $Subject = 'Article'|'Comment';
export type $Subjects = {
  Article: ArticleType;
  Comment: CommentType;
};
export type $Actions = {
  Article: 'create'|'read'|'edit'|'archive'|'publish'|'delete';
  Comment: 'read'|'answer'|'edit'|'archive'|'delete'|'publish';
};

export type CanOptions = {
  I: $UserType;
  actingAs?: $Role[];
} & ({
  when: 'Article';
  subject: ArticleType;
  doWhat: $Actions['Article'];
  allowing?: $Actions['Article'][];
  forbiding?: $Actions['Article'][];
} |  {
  when: 'Comment';
  subject: CommentType;
  doWhat: $Actions['Comment'];
  allowing?: $Actions['Comment'][];
  forbiding?: $Actions['Comment'][];
});

export function can({ I: user, actingAs = [], when, subject, allowing = [], forbiding = [], doWhat }: CanOptions) {
  const commonExpressions = [
    (): null => null,
    (): null => null,
    (): boolean => true,
    (): boolean => false,
    (): UserType => user,
    (): number => commonExpressions[4]().id
  ] as const;

  const subjectHandlers: { [K in $Subject]: (subject: $Subjects[K], allowed: $Actions[K], forbidden: $Actions[K]) => boolean} = {
    Article(subject: ArticleType, allowed: $Actions['Article'], forbidden: $Actions['Article']) {
      const subjectExpressions = [
        (): null => null,
        (): ArticleType => subject,
        (): UserType => subjectExpressions[1]().author,
        (): number => subjectExpressions[2]().id,
        (): boolean => commonExpressions[5]() == subjectExpressions[3](),
        (): boolean => commonExpressions[2]() && subjectExpressions[4](),
        (): boolean => !subjectExpressions[4](),
        (): boolean => commonExpressions[2]() && subjectExpressions[6]()
      ] as const;
      const actionBits = {
        create: {
          allow: [0, 0],
          forbid: [0, 1],
        },
        read: {
          allow: [0, 2],
          forbid: [0, 3],
        },
        edit: {
          allow: [0, 4],
          forbid: [0, 5],
        },
        archive: {
          allow: [0, 6],
          forbid: [0, 7],
        },
        publish: {
          allow: [1, 0],
          forbid: [1, 1],
        },
        delete: {
          allow: [1, 2],
          forbid: [1, 3],
        },
      };
      const roleHandlers: Record<$Role, (() => [boolean, number[]])[]> = {
        AdminUser: [
          () => [commonExpressions[2](), [0x55, 0x05]]
        ],
        NormalUser: [
          () => [subjectExpressions[5](), [0x54, 0x00]],
          () => [subjectExpressions[7](), [0x04, 0x00]]
        ],
      };
      const { allow, forbid } = actionBits[doWhat];
      const mask = actingAs.flatMap(role => roleHandlers[role])
        .map(item => item())
        .filter(([condition, _]) => condition)
        .map(([_, mask]) => mask)
        .reduce((lhs, rhs) => or(lhs, rhs));
      return mask.length > 0
        && (mask[forbid[0]] & forbid[1]) === 0
        && (mask[allow[0]] & allow[1]) !== 0;
    },
    Comment(subject: CommentType, allowed: $Actions['Comment'], forbidden: $Actions['Comment']) {
      const subjectExpressions = [
        (): null => null
      ] as const;
      const actionBits = {
        read: {
          allow: [0, 0],
          forbid: [0, 1],
        },
        answer: {
          allow: [0, 2],
          forbid: [0, 3],
        },
        edit: {
          allow: [0, 4],
          forbid: [0, 5],
        },
        archive: {
          allow: [0, 6],
          forbid: [0, 7],
        },
        delete: {
          allow: [1, 0],
          forbid: [1, 1],
        },
        publish: {
          allow: [1, 2],
          forbid: [1, 3],
        },
      };
      const roleHandlers: Record<$Role, (() => [boolean, number[]])[]> = {
        AdminUser: [
          () => [commonExpressions[2](), [0x55, 0x05]]
        ],
        NormalUser: [
          
        ],
      };
      const { allow, forbid } = actionBits[doWhat];
      const mask = actingAs.flatMap(role => roleHandlers[role])
        .map(item => item())
        .filter(([condition, _]) => condition)
        .map(([_, mask]) => mask)
        .reduce((lhs, rhs) => or(lhs, rhs));
      return mask.length > 0
        && (mask[forbid[0]] & forbid[1]) === 0
        && (mask[allow[0]] & allow[1]) !== 0;
    },
  };
  return subjectHandlers[when](subject as any, (allowing ?? []) as any, (forbiding ?? []) as any);
}
"
`;
