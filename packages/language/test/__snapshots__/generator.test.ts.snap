// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`ecchi-generator > blog 1`] = `
"import { Reflection, Cache, LRUCache, cacheCommonExpressions, cacheSubjectExpressions, merge } from "@ecchi-js/core";

interface UserType {
  $type: "UserType";
  id: number;
  name: string;
  email: string;
  createdAt: string;
  updatedAt: string;
}
interface ArticleType {
  $type: "ArticleType";
  id: number;
  title: string;
  content: string;
  createdAt: string;
  updatedAt: string;
  author: UserType;
  published: boolean;
}
interface CommentType {
  $type: "CommentType";
  id: number;
  content: string;
  createdAt: string;
  updatedAt: string;
  author: UserType;
  article: ArticleType;
  published: boolean;
}
interface A {
  $type: "A"|"B";
  
}
interface B extends A {
  $type: "B";
  
}

export type $Types = {
  UserType: UserType,
  ArticleType: ArticleType,
  CommentType: CommentType,
  A: A,
  B: B,
}

export const $Reflection = new Reflection<$Types>({
  UserType: [0,  1],
  ArticleType: [2,  3],
  CommentType: [4,  5],
  A: [6,  9],
  B: [7,  8],
});

export type $UserType = UserType;


export type $Role = 'AdminUser'|'NormalUser';
export type $Subject = 'Article'|'Comment';
export type $Subjects = {
  Article: ArticleType;
  Comment: CommentType;
};
export type $Actions = {
  Article: 'create'|'read'|'edit'|'archive'|'publish'|'delete';
  Comment: 'read'|'answer'|'edit'|'archive'|'delete'|'publish';
};

export type CanOptions = {
  I: $UserType;
  actingAs?: $Role[];
  cache?: Cache;
} & ({
  when: 'Article';
  subject: ArticleType;
  doWhat: $Actions['Article'];
} |  {
  when: 'Comment';
  subject: CommentType;
  doWhat: $Actions['Comment'];
});

const DefaultCache = new LRUCache(128);

export function can({
  I: user,
  actingAs = [],
  when,
  subject,
  doWhat,
  cache = DefaultCache
}: CanOptions) {
  type Common = readonly [null, null, boolean, boolean, UserType, number];
  const commonExpressions = cacheCommonExpressions<Common>([
    (): null => null,
    (): null => null,
    (): boolean => true,
    (): boolean => false,
    (): UserType => user,
    (commons): number => commons[4].id
  ] as const, [user], cache);

  const subjectHandlers: { [K in $Subject]: (subject: $Subjects[K]) => boolean} = {
    Article(subject: ArticleType) {
      type Subject = readonly [null, ArticleType, UserType, number, boolean, boolean, boolean, boolean];
      const subjectExpressions = cacheSubjectExpressions<Common, Subject>(commonExpressions, [
        (): null => null,
        (): ArticleType => subject,
        (_common, subjects): UserType => subjects[1].author,
        (_common, subjects): number => subjects[2].id,
        (commons, subjects): boolean => commons[5] == subjects[3],
        (commons, subjects): boolean => commons[2] && subjects[4],
        (_common, subjects): boolean => !subjects[4],
        (commons, subjects): boolean => commons[2] && subjects[6]
      ] as const, [subject], cache);
      const actionBits = {
        create: {
          allow: [0, 1 << 0],
          forbid: [0, 1 << 1],
        },
        read: {
          allow: [0, 1 << 2],
          forbid: [0, 1 << 3],
        },
        edit: {
          allow: [0, 1 << 4],
          forbid: [0, 1 << 5],
        },
        archive: {
          allow: [0, 1 << 6],
          forbid: [0, 1 << 7],
        },
        publish: {
          allow: [1, 1 << 0],
          forbid: [1, 1 << 1],
        },
        delete: {
          allow: [1, 1 << 2],
          forbid: [1, 1 << 3],
        },
      };
      const roleHandlers: Record<$Role, (() => [boolean, number[]])[]> = {
        AdminUser: [
          () => [commonExpressions[2], [0x55, 0x05]]
        ],
        NormalUser: [
          () => [subjectExpressions[5], [0x54, 0x00]],
          () => [subjectExpressions[7], [0x04, 0x00]]
        ],
      };
      const { allow, forbid } = actionBits[doWhat];
      return merge(allow, forbid, actingAs, roleHandlers);
    },
    Comment(subject: CommentType) {
      type Subject = readonly [null];
      const subjectExpressions = cacheSubjectExpressions<Common, Subject>(commonExpressions, [
        (): null => null
      ] as const, [subject], cache);
      const actionBits = {
        read: {
          allow: [0, 1 << 0],
          forbid: [0, 1 << 1],
        },
        answer: {
          allow: [0, 1 << 2],
          forbid: [0, 1 << 3],
        },
        edit: {
          allow: [0, 1 << 4],
          forbid: [0, 1 << 5],
        },
        archive: {
          allow: [0, 1 << 6],
          forbid: [0, 1 << 7],
        },
        delete: {
          allow: [1, 1 << 0],
          forbid: [1, 1 << 1],
        },
        publish: {
          allow: [1, 1 << 2],
          forbid: [1, 1 << 3],
        },
      };
      const roleHandlers: Record<$Role, (() => [boolean, number[]])[]> = {
        AdminUser: [
          () => [commonExpressions[2], [0x55, 0x05]]
        ],
        NormalUser: [
          
        ],
      };
      const { allow, forbid } = actionBits[doWhat];
      return merge(allow, forbid, actingAs, roleHandlers);
    },
  };
  return subjectHandlers[when](subject as any);
}
"
`;
