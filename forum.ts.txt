import { assertUnreachable, Reflection, SubjectActions, SubjectActionsBase, Bitmask } from "@ecchi-js/core";

interface Member {
  $type: "Member";
  id: number;
  name: string;
  email: string;
  moderatorFor: Forum[];
  memberFor: Forum[];
}
interface Environment {
  $type: "Environment";
  owner: Member;
}
interface Forum {
  $type: "Forum";
  id: number;
  name: string;
  tags: string[];
  description: string;
}
interface Topic {
  $type: "Topic";
  id: number;
  title: string;
  forum: Forum;
  author: Member;
}
interface Post {
  $type: "Post";
  id: number;
  title: string;
  content: string;
  author: Member;
  createdAt: number;
  topic: Topic;
}

export type $Types = {
  Member: Member,
  Environment: Environment,
  Forum: Forum,
  Topic: Topic,
  Post: Post,
}

export const $Reflection = new Reflection<$Types>({
  Member: [0,  1],
  Environment: [2,  3],
  Forum: [4,  5],
  Topic: [6,  7],
  Post: [8,  9],
});

export type $UserType = Member;


export type $Role = 'admin'|'moderator'|'registered'|'guest';
export type $Subject = 'member'|'forum'|'topic'|'post';
export type $Subjects = {
  member: Member;
  forum: Forum;
  topic: Topic;
  post: Post;
};
export type $Actions = {
  member: 'update'|'show_profile'|'follow_member'|'subscribe_forum';
  forum: 'create'|'read'|'update'|'delete';
  topic: 'create'|'read'|'update'|'delete';
  post: 'create'|'read'|'update'|'delete';
};

export type CanOptions = {
  I: $UserType;
  actingAs?: $Role[];
} & ({
  when: 'member';
  subject: Member;
  allowing?: $Actions['member'][];
  forbiding?: $Actions['member'][];
} |  {
  when: 'forum';
  subject: Forum;
  allowing?: $Actions['forum'][];
  forbiding?: $Actions['forum'][];
} |  {
  when: 'topic';
  subject: Topic;
  allowing?: $Actions['topic'][];
  forbiding?: $Actions['topic'][];
} |  {
  when: 'post';
  subject: Post;
  allowing?: $Actions['post'][];
  forbiding?: $Actions['post'][];
});

export function can({ I: user, actingAs, when, subject, allowing, forbiding }: CanOptions) {
  const commonExpressions = [
    (): null => null,
    (): null => null,
    (): boolean => true,
    (): boolean => false,
    (): Member => user,
    (): Forum[] => commonExpressions[4]().memberFor,
    (): Forum[] => commonExpressions[4]().moderatorFor
  ] as const;

  const subjectHandlers: { [K in $Subject]: (subject: $Subjects[K], allowed: $Actions[K], forbidden: $Actions[K]) => boolean} = {
    member(subject: Member, allowed: $Actions['member'], forbidden: $Actions['member']) {
      const subjectExpressions = [
        (): null => null,
        (): Member => subject,
        (): boolean => commonExpressions[4]() == subjectExpressions[1](),
        (): boolean => commonExpressions[2]() && subjectExpressions[2]()
      ] as const;
      const roleHandlers: Record<$Role, () => void> = {
        
      };
      return false;
    },
    forum(subject: Forum, allowed: $Actions['forum'], forbidden: $Actions['forum']) {
      const subjectExpressions = [
        (): null => null,
        (): Forum => subject,
        (): boolean => commonExpressions[5]().includes(subjectExpressions[1]()),
        (): boolean => commonExpressions[2]() && subjectExpressions[2](),
        (): boolean => commonExpressions[6]().includes(subjectExpressions[1]()),
        (): boolean => commonExpressions[2]() && subjectExpressions[4]()
      ] as const;
      const roleHandlers: Record<$Role, () => void> = {
        
      };
      return false;
    },
    topic(subject: Topic, allowed: $Actions['topic'], forbidden: $Actions['topic']) {
      const subjectExpressions = [
        (): null => null,
        (): Topic => subject,
        (): Forum => subjectExpressions[1]().forum,
        (): boolean => commonExpressions[6]().includes(subjectExpressions[2]()),
        (): boolean => commonExpressions[2]() && subjectExpressions[3](),
        (): boolean => commonExpressions[5]().includes(subjectExpressions[2]()),
        (): boolean => commonExpressions[2]() && subjectExpressions[5](),
        (): Member => subjectExpressions[1]().author,
        (): boolean => subjectExpressions[7]() == commonExpressions[4](),
        (): boolean => commonExpressions[2]() && subjectExpressions[8]()
      ] as const;
      const roleHandlers: Record<$Role, () => void> = {
        
      };
      return false;
    },
    post(subject: Post, allowed: $Actions['post'], forbidden: $Actions['post']) {
      const subjectExpressions = [
        (): null => null,
        (): Post => subject,
        (): Topic => subjectExpressions[1]().topic,
        (): Forum => subjectExpressions[2]().forum,
        (): boolean => commonExpressions[6]().includes(subjectExpressions[3]()),
        (): boolean => commonExpressions[2]() && subjectExpressions[4](),
        (): boolean => commonExpressions[5]().includes(subjectExpressions[3]()),
        (): boolean => commonExpressions[2]() && subjectExpressions[6](),
        (): Member => subjectExpressions[1]().author,
        (): boolean => subjectExpressions[8]() == commonExpressions[4](),
        (): boolean => commonExpressions[2]() && subjectExpressions[9]()
      ] as const;
      const roleHandlers: Record<$Role, () => void> = {
        
      };
      return false;
    },
  };
  return subjectHandlers[when](subject as any, (allowing ?? []) as any, (forbiding ?? []) as any);
}
